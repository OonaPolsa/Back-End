
Microsoft Visual Studio Solution File, Format Version 12.00
# Visual Studio Version 16
VisualStudioVersion = 16.0.32106.194
MinimumVisualStudioVersion = 10.0.40219.1
Project("{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}") = "ReservationSystem", "ReservationSystem\ReservationSystem.csproj", "{AF022C3F-CCC0-4C89-8E9B-5B04224403B3}"
EndProject
Global
	GlobalSection(SolutionConfigurationPlatforms) = preSolution
		Debug|Any CPU = Debug|Any CPU
		Release|Any CPU = Release|Any CPU
	EndGlobalSection
	GlobalSection(ProjectConfigurationPlatforms) = postSolution
		{AF022C3F-CCC0-4C89-8E9B-5B04224403B3}.Debug|Any CPU.ActiveCfg = Debug|Any CPU
		{AF022C3F-CCC0-4C89-8E9B-5B04224403B3}.Debug|Any CPU.Build.0 = Debug|Any CPU
		{AF022C3F-CCC0-4C89-8E9B-5B04224403B3}.Release|Any CPU.ActiveCfg = Release|Any CPU
		{AF022C3F-CCC0-4C89-8E9B-5B04224403B3}.Release|Any CPU.Build.0 = Release|Any CPU
	EndGlobalSection
	GlobalSection(SolutionProperties) = preSolution
		HideSolutionNode = FALSE
	EndGlobalSection
	GlobalSection(ExtensibilityGlobals) = postSolution
		SolutionGuid = {1A1FFE02-B0D5-46D7-802F-85168587B992}
	EndGlobalSection
EndGlobal
 112  
ReservationSystem/Controllers/ItemsController.cs
@@ -0,0 +1,112 @@
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ReservationSystem.Models;
using ReservationSystem.Services;

namespace ReservationSystem.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ItemsController : ControllerBase
    {
        //private readonly ReservationContext _context;
        private readonly IItemService _service;

        public ItemsController(IItemService service)
        {
            _service = service;
        }

        // GET: api/Items
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Item>>> GetItems()
        {
            return Ok(await _service.GetAllItems());
        }

        // GET: api/Items/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Item>> GetItem(long id)
        {
            //var item = await _context.Items.FindAsync(id);

            //if (item == null)
            //{
            //    return NotFound();
            // }

            // return item;
            return null;
        }

        // PUT: api/Items/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutItem(long id, Item item)
        {
            // if (id != item.Id)
            // {
            //     return BadRequest();
            //  }

            //  _context.Entry(item).State = EntityState.Modified;

            // try
            //{
            //     await _context.SaveChangesAsync();
            //}
            // catch (DbUpdateConcurrencyException)
            // {
            //    if (!ItemExists(id))
            //    {
            //    return NotFound();
            // }
            //  else
            //  {
            //      throw;
            //  }
            // }

            // return NoContent();
            return null;
        }

        // POST: api/Items
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost]
        public async Task<ActionResult<Item>> PostItem(Item item)
        {
            Item newItem = await _service.CreateItemAsync(item);

            if (newItem != null)
            {
                return CreatedAtAction("GetItem", new { id = item.Id }, item);
            }
            return StatusCode(500);
        }

        // DELETE: api/Items/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Item>> DeleteItem(long id)
        {
            //var item = await _context.Items.FindAsync(id);
            //if (item == null)
            // {
            //    return NotFound();
            //}

            // _context.Items.Remove(item);
            // await _context.SaveChangesAsync();

            // return item;
            return null;
        }
    }
}
 110  
ReservationSystem/Controllers/ReservationsController.cs
@@ -0,0 +1,110 @@
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ReservationSystem.Models;
using ReservationSystem.Services;

namespace ReservationSystem.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class ReservationsController : ControllerBase
    {
        //private readonly ReservationContext _context;
        private readonly IReservationService _service;

        public ReservationsController(IReservationService service)
        {
            _service = service;
        }

        // GET: api/Reservations
        [HttpGet]
        public async Task<ActionResult<IEnumerable<Reservation>>> GetReservations()
        {
            //return await _context.Reservations.ToListAsync();
            return null;
        }

        // GET: api/Reservations/5
        [HttpGet("{id}")]
        public async Task<ActionResult<Reservation>> GetReservation(long id)
        {
            //var reservation = await _context.Reservations.FindAsync(id);

            //if (reservation == null)
            //{
            //   return NotFound();
            //}

            // return reservation;
            return null;
        }

        // PUT: api/Reservations/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPut("{id}")]
        public async Task<IActionResult> PutReservation(long id, Reservation reservation)
        {
            //if (id != reservation.Id)
            //{
             //   return BadRequest();
            //}

           // _context.Entry(reservation).State = EntityState.Modified;

            //try
           // {
            //    await _context.SaveChangesAsync();
           // }
           // catch (DbUpdateConcurrencyException)
           // {
            //    if (!ReservationExists(id))
            //    {
                 //   return NotFound();
               // }
               // else
              //  {
              //      throw;
             //   }
            //}

            return NoContent();
        }

        // POST: api/Reservations
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        [HttpPost]
        public async Task<ActionResult<Reservation>> PostReservation(Reservation reservation)
        {

            await _service.CreateReservationAsync(reservation);

            return CreatedAtAction("GetReservation", new { id = reservation.Id }, reservation);

        }

        // DELETE: api/Reservations/5
        [HttpDelete("{id}")]
        public async Task<ActionResult<Reservation>> DeleteReservation(long id)
        {
            // var reservation = await _context.Reservations.FindAsync(id);
            // if (reservation == null)
            // {
            //     return NotFound();
            // }

            //  _context.Reservations.Remove(reservation);
            // await _context.SaveChangesAsync();

            // return reservation;
            return null;
        }
    }
}
 143  
ReservationSystem/Controllers/UsersController.cs
@@ -0,0 +1,143 @@
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using ReservationSystem.Models;
using ReservationSystem.Services;

namespace ReservationSystem.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class UsersController : ControllerBase
    {
        //private readonly ReservationContext _context;
        private readonly IUserService _service;

        public UsersController(IUserService service)
        {
            _service = service;
        }

        // GET: api/Users
        /// <summary>
        /// Gets a list of all users
        /// </summary>
        /// <returns></returns>
        [HttpGet]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<IEnumerable<User>>> GetUsers()
        {
            return Ok(await _service.GetAllUsersAsync());
            //return await _context.Users.ToListAsync();
        }

        // GET: api/Users/5
        /// <summary>
        /// Gets one user
        /// </summary>
        /// <param name="id">user id</param>
        /// <returns>User information as json</returns>
        /// <responce code="200">User found</responce>
        /// <responce code="404">User not found</responce>
        [HttpGet("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        [ProducesResponseType(StatusCodes.Status404NotFound)]
        [Produces("application/json")]
        public async Task<ActionResult<User>> GetUser(long id)
        {
            //var user = await _context.Users.FindAsync(id);

            //if (user == null)
            //{
            //  return NotFound();
            // }

            // return user;
            return null;
        }

        // PUT: api/Users/5
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        /// <summary>
        /// Edit user
        /// </summary>
        /// <param name="id">Id of the user</param>
        /// <param name="user">User´s new information</param>
        /// <returns></returns>
        [HttpPut("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<IActionResult> PutUser(long id, User user)
        {
            //if (id != user.Id)
           // {
           //     return BadRequest();
           // }

           // _context.Entry(user).State = EntityState.Modified;

            //try
            //{
            //    await _context.SaveChangesAsync();
           // }
           // catch (DbUpdateConcurrencyException)
           // {
            //    if (!UserExists(id))
            //    {
              //      return NotFound();
               // }
               // else
               // {
               //     throw;
              //  }
           // }

            return NoContent();
        }

        // POST: api/Users
        // To protect from overposting attacks, enable the specific properties you want to bind to, for
        // more details, see https://go.microsoft.com/fwlink/?linkid=2123754.
        /// <summary>
        /// Add a new user to system
        /// </summary>
        /// <param name="user">User information</param>
        /// <returns></returns>
        [HttpPost]
        [ProducesResponseType(StatusCodes.Status201Created)]
        public async Task<ActionResult<UserDTO>> PostUser(User user)
        {
            UserDTO newUser = await _service.CreateUserAsync(user);

            return CreatedAtAction("GetUser", new { id = newUser.Id }, newUser);
        }

        // DELETE: api/Users/5
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <param name="id">Id of user to be deleted</param>
        /// <returns></returns>
        [HttpDelete("{id}")]
        [ProducesResponseType(StatusCodes.Status200OK)]
        public async Task<ActionResult<User>> DeleteUser(long id)
        {
            //var user = await _context.Users.FindAsync(id);
            //if (user == null)
            // {
            //    return NotFound();
            //}

            // _context.Users.Remove(user);
            // await _context.SaveChangesAsync();

            //return user;
            return null;
        }

    }
}
 39  
ReservationSystem/Controllers/WeatherForecastController.cs
@@ -0,0 +1,39 @@
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Controllers
{
    [ApiController]
    [Route("[controller]")]
    public class WeatherForecastController : ControllerBase
    {
        private static readonly string[] Summaries = new[]
        {
            "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching"
        };

        private readonly ILogger<WeatherForecastController> _logger;

        public WeatherForecastController(ILogger<WeatherForecastController> logger)
        {
            _logger = logger;
        }

        [HttpGet]
        public IEnumerable<WeatherForecast> Get()
        {
            var rng = new Random();
            return Enumerable.Range(1, 5).Select(index => new WeatherForecast
            {
                Date = DateTime.Now.AddDays(index),
                TemperatureC = rng.Next(-20, 55),
                Summary = Summaries[rng.Next(Summaries.Length)]
            })
            .ToArray();
        }
    }
}
 16  
ReservationSystem/Models/Item.cs
@@ -0,0 +1,16 @@
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Models
{
    public class Item
    {
        public long Id { get; set; }
        public String Name { get; set; }
        public String Description { get; set; }
        public String Image { get; set; }
        public User Owner { get; set; }
    }
}
 16  
ReservationSystem/Models/Reservation.cs
@@ -0,0 +1,16 @@
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Models
{
    public class Reservation
    {
        public long Id { get; set; }
        public Item Target {get; set;}
        public User Owner { get; set; }
        public DateTime Start { get; set; }
        public DateTime End { get; set; }
    }
}
 19  
ReservationSystem/Models/ReservationContext.cs
@@ -0,0 +1,19 @@
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Models
{
    public class ReservationContext : DbContext
    {
        public ReservationContext(DbContextOptions<ReservationContext> options) 
            : base(options)
        { 
        }
        public DbSet<Reservation> Reservations { get; set; }
        public DbSet<Item> Items { get; set; }
        public DbSet<User> Users { get; set; }
    }
}
 24  
ReservationSystem/Models/User.cs
@@ -0,0 +1,24 @@
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Models
{
    public class User
    {
        public long Id { get; set; }
        [Required]
        [MinLength(3)]
        [MaxLength(25)]
        public String UserName { get; set; }
        [MaxLength(25)]
        public String FirstName { get; set; }
        [MaxLength(25)]
        public String LastName { get; set;}
        [Required]
        public String Password { get; set; }

    }
}
 21  
ReservationSystem/Models/UserDTO.cs
@@ -0,0 +1,21 @@
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Models
{
    public class UserDTO
    {
        public long Id { get; set; }
        [Required]
        [MinLength(3)]
        [MaxLength(25)]
        public String UserName { get; set; }
        [MaxLength(25)]
        public String FirstName { get; set; }
        [MaxLength(25)]
        public String LastName { get; set; }
    }
}
 26  
ReservationSystem/Program.cs
@@ -0,0 +1,26 @@
using Microsoft.AspNetCore.Hosting;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem
{
    public class Program
    {
        public static void Main(string[] args)
        {
            CreateHostBuilder(args).Build().Run();
        }

        public static IHostBuilder CreateHostBuilder(string[] args) =>
            Host.CreateDefaultBuilder(args)
                .ConfigureWebHostDefaults(webBuilder =>
                {
                    webBuilder.UseStartup<Startup>();
                });
    }
}
 30  
ReservationSystem/Properties/launchSettings.json
@@ -0,0 +1,30 @@
{
  "$schema": "http://json.schemastore.org/launchsettings.json",
  "iisSettings": {
    "windowsAuthentication": false,
    "anonymousAuthentication": true,
    "iisExpress": {
      "applicationUrl": "http://localhost:21293",
      "sslPort": 44331
    }
  },
  "profiles": {
    "IIS Express": {
      "commandName": "IISExpress",
      "launchBrowser": true,
      "launchUrl": "api/items",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    },
    "ReservationSystem": {
      "commandName": "Project",
      "launchBrowser": true,
      "launchUrl": "weatherforecast",
      "applicationUrl": "https://localhost:5001;http://localhost:5000",
      "environmentVariables": {
        "ASPNETCORE_ENVIRONMENT": "Development"
      }
    }
  }
}
 14  
ReservationSystem/Repositories/IItemRepository.cs
@@ -0,0 +1,14 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Repositories
{
    public interface IItemRepository
    {
        public Task<Item> AddItemAsync(Item item);
        public Task<IEnumerable<Item>> GetAllItems();
    }
}
 13  
ReservationSystem/Repositories/IReservationRepository.cs
@@ -0,0 +1,13 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Repositories
{
   public interface IReservationRepository
    {
        public Task<Reservation> AddReservationAsync(Reservation res);
    }
}
 14  
ReservationSystem/Repositories/IUserRepository.cs
@@ -0,0 +1,14 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Repositories
{
   public interface IUserRepository
    {
        public Task<User> AddUserAsync(User user);
        public Task<IEnumerable<User>> GetAllUsersAsync();
    }
}
 36  
ReservationSystem/Repositories/ItemRepository.cs
@@ -0,0 +1,36 @@
using Microsoft.EntityFrameworkCore;
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Repositories
{
    public class ItemRepository : IItemRepository
    {
        private readonly ReservationContext _context;
        public ItemRepository(ReservationContext context)
        {
            _context = context;
        }
        public async Task<Item> AddItemAsync(Item item)
        {
            _context.Items.Add(item);
            try
            {
               await _context.SaveChangesAsync();
            }
            catch(Exception)
            {

            }
            return item;
        }

        public async Task<IEnumerable<Item>> GetAllItems()
        {
            return await _context.Items.ToListAsync();
        }
    }
}
 32  
ReservationSystem/Repositories/ReservationRepository.cs
@@ -0,0 +1,32 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Repositories
{
    public class ReservationRepository : IReservationRepository
    {
        private readonly ReservationContext _context;
        public ReservationRepository(ReservationContext context) 
        {
            _context = context;
        }
        public async Task<Reservation> AddReservationAsync(Reservation res)
        {
            //Tallenna uusi varaus
            _context.Reservations.Add(res);
            try { 
            await _context.SaveChangesAsync();
            }
            catch(Exception)
            {

            }
            return res;


        }
    }
}
 37  
ReservationSystem/Repositories/UserRepository.cs
@@ -0,0 +1,37 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;

namespace ReservationSystem.Repositories
{
    public class UserRepository : IUserRepository
    {
        private readonly ReservationContext _context;
        public UserRepository(ReservationContext context)
        {
            _context = context;
        }
        public async Task<User> AddUserAsync(User user)
        {
            _context.Users.Add(user);

            try
            {
                await _context.SaveChangesAsync();
            }
            catch (Exception)
            {

            }
            return user;
        }

        public async Task<IEnumerable<User>> GetAllUsersAsync()
        {
            return await _context.Users.ToListAsync();
        }
    }
}
 19  
ReservationSystem/ReservationSystem.csproj
@@ -0,0 +1,19 @@
<Project Sdk="Microsoft.NET.Sdk.Web">

  <PropertyGroup>
    <TargetFramework>netcoreapp3.1</TargetFramework>
	  <GenerateDocumentationFile>true</GenerateDocumentationFile>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.EntityFrameworkCore.SqlServer" Version="3.1.21" />
    <PackageReference Include="Microsoft.EntityFrameworkCore.Tools" Version="3.1.21">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
    <PackageReference Include="Microsoft.VisualStudio.Web.CodeGeneration.Design" Version="3.1.5" />
    <PackageReference Include="Swashbuckle.AspNetCore" Version="6.2.3" />
  </ItemGroup>


</Project>
 14  
ReservationSystem/Services/IItemService.cs
@@ -0,0 +1,14 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
    public interface IItemService
    {
        public Task<Item> CreateItemAsync(Item item);
        public Task<IEnumerable<Item>> GetAllItems();
    }
}
 13  
ReservationSystem/Services/IReservationService.cs
@@ -0,0 +1,13 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
    public interface IReservationService
    {
        public Task CreateReservationAsync(Reservation res);
    }
}
 14  
ReservationSystem/Services/IUserServive.cs
@@ -0,0 +1,14 @@
using ReservationSystem.Models;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
   public interface IUserService
    {
        public Task<UserDTO> CreateUserAsync(User user);
        public Task<IEnumerable<UserDTO>> GetAllUsersAsync();
    }
}
 36  
ReservationSystem/Services/ItemService.cs
@@ -0,0 +1,36 @@
using ReservationSystem.Models;
using ReservationSystem.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
    public class ItemService : IItemService
    {
        private readonly IItemRepository _repository;
        public ItemService(IItemRepository repository)
        {
            _repository = repository;
        }
        public async Task<Item> CreateItemAsync(Item item)
        {
           item = await _repository.AddItemAsync(item);

            if (item.Id != 0)
            {
                return item;
            }
            else
            {
                return null;
            }
        }

        public async Task<IEnumerable<Item>> GetAllItems()
        {
            return await _repository.GetAllItems();
        }
    }
}
 26  
ReservationSystem/Services/ReservationService.cs
@@ -0,0 +1,26 @@
using ReservationSystem.Models;
using ReservationSystem.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
    public class ReservationService : IReservationService
    {
        private readonly IReservationRepository _repository;
        public ReservationService(IReservationRepository repository) 
        {
            _repository = repository;
        }
        public async Task CreateReservationAsync(Reservation res)
        {
            //Lisää varaus
            //Tarkista ensin onko kohde vapaa halutulla ajalla

            await _repository.AddReservationAsync(res);

        }
    }
}
 58  
ReservationSystem/Services/UserService.cs
@@ -0,0 +1,58 @@
using ReservationSystem.Models;
using ReservationSystem.Repositories;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace ReservationSystem.Services
{
    public class UserService : IUserService
    {
        private readonly IUserRepository _repository;
        public UserService(IUserRepository repository)
        {
            _repository = repository;
        }
        public async Task<UserDTO> CreateUserAsync(User user)
        {
            User newUser = await _repository.AddUserAsync(user);
            return UserToDTO(newUser);
        }


        public async Task<IEnumerable<UserDTO>> GetAllUsersAsync()
        {
            List<User> list = (await _repository.GetAllUsersAsync()).ToList();
            List<UserDTO> dtoList = new List<UserDTO>();
            foreach(User u in list){
                dtoList.Add(UserToDTO(u));

            }
            return dtoList;
        }

        private User DTOToUser(UserDTO user, String password)
        {
            User newUser = new User();
            newUser.UserName = user.UserName;
            newUser.FirstName = user.FirstName;
            newUser.LastName = user.LastName;
            newUser.Password = password;

            return newUser;
        }

        private UserDTO UserToDTO(User user)
        {
            UserDTO dto = new UserDTO();
            dto.Id = user.Id;
            dto.UserName = user.UserName;
            dto.FirstName = user.FirstName;
            dto.LastName = user.LastName;

            return dto;
        }

    }
}
 80  
ReservationSystem/Startup.cs
@@ -0,0 +1,80 @@
using Microsoft.AspNetCore.Builder;
using Microsoft.AspNetCore.Hosting;
using Microsoft.AspNetCore.HttpsPolicy;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Microsoft.OpenApi.Models;
using ReservationSystem.Models;
using ReservationSystem.Repositories;
using ReservationSystem.Services;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Threading.Tasks;

namespace ReservationSystem
{
    public class Startup
    {
        public Startup(IConfiguration configuration)
        {
            Configuration = configuration;
        }

        public IConfiguration Configuration { get; }

        // This method gets called by the runtime. Use this method to add services to the container.
        public void ConfigureServices(IServiceCollection services)
        {
            services.AddControllers();
            services.AddDbContext<ReservationContext>(opt => opt.UseSqlServer(Configuration.GetConnectionString("ReservationDB")));
            services.AddScoped<IReservationService, ReservationService>();
            services.AddScoped<IReservationRepository, ReservationRepository>();
            services.AddScoped<IItemService, ItemService>();
            services.AddScoped<IItemRepository, ItemRepository>();
            services.AddScoped<IUserService, UserService>();
            services.AddScoped<IUserRepository, UserRepository>();

            services.AddSwaggerGen(options =>
            { 
                options.SwaggerDoc("v1", new OpenApiInfo
                {
                    Version = "v1",
                    Title = "Reservation API",
                    Description = "An ASP.NET Core Web API for managing reservations"
                });
                var xmlFileName = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
                options.IncludeXmlComments(Path.Combine(AppContext.BaseDirectory, xmlFileName));
            });
        }

        // This method gets called by the runtime. Use this method to configure the HTTP request pipeline.
        public void Configure(IApplicationBuilder app, IWebHostEnvironment env, ReservationContext db)
        {
            if (env.IsDevelopment())
            {
                app.UseDeveloperExceptionPage();
                app.UseSwagger();
                app.UseSwaggerUI();
            }
            db.Database.EnsureCreated();

            app.UseHttpsRedirection();

            app.UseRouting();

            app.UseAuthorization();

            app.UseEndpoints(endpoints =>
            {
                endpoints.MapControllers();
            });
        }
    }
}
 15  
ReservationSystem/WeatherForecast.cs
@@ -0,0 +1,15 @@
using System;

namespace ReservationSystem
{
    public class WeatherForecast
    {
        public DateTime Date { get; set; }

        public int TemperatureC { get; set; }

        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);

        public string Summary { get; set; }
    }
}
 9  
ReservationSystem/appsettings.Development.json
@@ -0,0 +1,9 @@
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  }
}
 13  
ReservationSystem/appsettings.json
@@ -0,0 +1,13 @@
{
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft": "Warning",
      "Microsoft.Hosting.Lifetime": "Information"
    }
  },
  "AllowedHosts": "*",
  "ConnectionStrings": {
    "ReservationDB": "Server=localhost;Database=ReservationDB;Trusted_Connection=True;"
  }
}
